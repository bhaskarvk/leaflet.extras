{"version":3,"file":"lfx-measure-path-prod.js","mappings":"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","sources":["webpack://leaflet.extras/./node_modules/leaflet-measure-path/leaflet-measure-path.js"],"sourcesContent":["!(function() {\n    'use strict';\n\n    L.Marker.Measurement = L[L.Layer ? 'Layer' : 'Class'].extend({\n        options: {\n            pane: 'markerPane'\n        },\n\n        initialize: function(latlng, measurement, title, rotation, options) {\n            L.setOptions(this, options);\n\n            this._latlng = latlng;\n            this._measurement = measurement;\n            this._title = title;\n            this._rotation = rotation;\n        },\n\n        addTo: function(map) {\n            map.addLayer(this);\n            return this;\n        },\n\n        onAdd: function(map) {\n            this._map = map;\n            var pane = this.getPane ? this.getPane() : map.getPanes().markerPane;\n            var el = this._element = L.DomUtil.create('div', 'leaflet-zoom-animated leaflet-measure-path-measurement', pane);\n            var inner = L.DomUtil.create('div', '', el);\n            inner.title = this._title;\n            inner.innerHTML = this._measurement;\n\n            map.on('zoomanim', this._animateZoom, this);\n\n            this._setPosition();\n        },\n\n        onRemove: function(map) {\n            map.off('zoomanim', this._animateZoom, this);\n            var pane = this.getPane ? this.getPane() : map.getPanes().markerPane;\n            pane.removeChild(this._element);\n            this._map = null;\n        },\n\n        _setPosition: function() {\n            L.DomUtil.setPosition(this._element, this._map.latLngToLayerPoint(this._latlng));\n            this._element.style.transform += ' rotate(' + this._rotation + 'rad)';\n        },\n\n        _animateZoom: function(opt) {\n            var pos = this._map._latLngToNewLayerPoint(this._latlng, opt.zoom, opt.center).round();\n            L.DomUtil.setPosition(this._element, pos);\n            this._element.style.transform += ' rotate(' + this._rotation + 'rad)';\n        }\n    });\n\n    L.marker.measurement = function(latLng, measurement, title, rotation, options) {\n        return new L.Marker.Measurement(latLng, measurement, title, rotation, options);\n    };\n\n    var formatDistance = function(d) {\n        var unit,\n            feet;\n\n        if (this._measurementOptions.imperial) {\n            feet = d / 0.3048;\n            if (feet > 3000) {\n                d = d / 1609.344;\n                unit = 'mi';\n            } else {\n                d = feet;\n                unit = 'ft';\n            }\n        } else {\n            if (d > 1000) {\n                d = d / 1000;\n                unit = 'km';\n            } else {\n                unit = 'm';\n            }\n        }\n\n        if (d < 100) {\n            return d.toFixed(1) + ' ' + unit;\n        } else {\n            return Math.round(d) + ' ' + unit;\n        }\n    }\n\n    var formatArea = function(a) {\n        var unit,\n            sqfeet;\n\n        if (this._measurementOptions.imperial) {\n            if (a > 404.685642) {\n                a = a / 4046.85642;\n                unit = 'ac';\n            } else {\n                a = a / 0.09290304;\n                unit = 'ft²';\n            }\n        } else {\n            if (a > 1000000) {\n                a = a / 1000000;\n                unit = 'km²';\n            } else {\n                unit = 'm²';\n            }\n        }\n\n        if (a < 100) {\n            return a.toFixed(1) + ' ' + unit;\n        } else {\n            return Math.round(a) + ' ' + unit;\n        }\n    }\n\n    var RADIUS = 6378137;\n    // ringArea function copied from geojson-area\n    // (https://github.com/mapbox/geojson-area)\n    // This function is distributed under a separate license,\n    // see LICENSE.md.\n    var ringArea = function ringArea(coords) {\n        var rad = function rad(_) {\n            return _ * Math.PI / 180;\n        };\n        var p1, p2, p3, lowerIndex, middleIndex, upperIndex,\n        area = 0,\n        coordsLength = coords.length;\n\n        if (coordsLength > 2) {\n            for (var i = 0; i < coordsLength; i++) {\n                if (i === coordsLength - 2) {// i = N-2\n                    lowerIndex = coordsLength - 2;\n                    middleIndex = coordsLength -1;\n                    upperIndex = 0;\n                } else if (i === coordsLength - 1) {// i = N-1\n                    lowerIndex = coordsLength - 1;\n                    middleIndex = 0;\n                    upperIndex = 1;\n                } else { // i = 0 to N-3\n                    lowerIndex = i;\n                    middleIndex = i+1;\n                    upperIndex = i+2;\n                }\n                p1 = coords[lowerIndex];\n                p2 = coords[middleIndex];\n                p3 = coords[upperIndex];\n                area += ( rad(p3.lng) - rad(p1.lng) ) * Math.sin( rad(p2.lat));\n            }\n\n            area = area * RADIUS * RADIUS / 2;\n        }\n\n        return Math.abs(area);\n    };\n    /**\n     * Handles the init hook for polylines and circles.\n     * Implements the showOnHover functionality if called for.\n     */\n    var addInitHook = function() {\n        var showOnHover = this.options.measurementOptions && this.options.measurementOptions.showOnHover;\n        if (this.options.showMeasurements && !showOnHover) {\n            this.showMeasurements();\n        }\n        if (this.options.showMeasurements && showOnHover) {\n            this.on('mouseover', function() {\n                this.showMeasurements();\n            });\n            this.on('mouseout', function() {\n                this.hideMeasurements();\n            });\n        }\n    };\n\n    var circleArea = function circleArea(d) {\n        var rho = d / RADIUS;\n        return 2 * Math.PI * RADIUS * RADIUS * (1 - Math.cos(rho));\n    };\n\n    var override = function(method, fn, hookAfter) {\n        if (!hookAfter) {\n            return function() {\n                var originalReturnValue = method.apply(this, arguments);\n                var args = Array.prototype.slice.call(arguments)\n                args.push(originalReturnValue);\n                return fn.apply(this, args);\n            }\n        } else {\n            return function() {\n                fn.apply(this, arguments);\n                return method.apply(this, arguments);\n            }\n        }\n    };\n\n    L.Polyline.include({\n        showMeasurements: function(options) {\n            if (!this._map || this._measurementLayer) return this;\n\n            this._measurementOptions = L.extend({\n                showOnHover: (options && options.showOnHover) || false,\n                minPixelDistance: 30,\n                showDistances: true,\n                showArea: true,\n                showTotalDistance: true,\n                lang: {\n                    totalLength: 'Total length',\n                    totalArea: 'Total area',\n                    segmentLength: 'Segment length'\n                }\n            }, options || {});\n\n            this._measurementLayer = L.layerGroup().addTo(this._map);\n            this.updateMeasurements();\n\n            this._map.on('zoomend', this.updateMeasurements, this);\n\n            return this;\n        },\n\n        hideMeasurements: function() {\n            if (!this._map) return this;\n\n            this._map.off('zoomend', this.updateMeasurements, this);\n\n            if (!this._measurementLayer) return this;\n            this._map.removeLayer(this._measurementLayer);\n            this._measurementLayer = null;\n\n            return this;\n        },\n\n        onAdd: override(L.Polyline.prototype.onAdd, function(originalReturnValue) {\n            var showOnHover = this.options.measurementOptions && this.options.measurementOptions.showOnHover;\n            if (this.options.showMeasurements && !showOnHover) {\n                this.showMeasurements(this.options.measurementOptions);\n            }\n\n            return originalReturnValue;\n        }),\n\n        onRemove: override(L.Polyline.prototype.onRemove, function(originalReturnValue) {\n            this.hideMeasurements();\n\n            return originalReturnValue;\n        }, true),\n\n        setLatLngs: override(L.Polyline.prototype.setLatLngs, function(originalReturnValue) {\n            this.updateMeasurements();\n\n            return originalReturnValue;\n        }),\n\n        spliceLatLngs: override(L.Polyline.prototype.spliceLatLngs, function(originalReturnValue) {\n            this.updateMeasurements();\n\n            return originalReturnValue;\n        }),\n\n        formatDistance: formatDistance,\n        formatArea: formatArea,\n\n        updateMeasurements: function() {\n            if (!this._measurementLayer) return this;\n\n            var latLngs = this.getLatLngs(),\n                isPolygon = this instanceof L.Polygon,\n                options = this._measurementOptions,\n                totalDist = 0,\n                formatter,\n                ll1,\n                ll2,\n                p1,\n                p2,\n                pixelDist,\n                dist;\n\n            if (latLngs && latLngs.length && L.Util.isArray(latLngs[0])) {\n                // Outer ring is stored as an array in the first element,\n                // use that instead.\n                latLngs = latLngs[0];\n            }\n\n            this._measurementLayer.clearLayers();\n\n            if (this._measurementOptions.showDistances && latLngs.length > 1) {\n                formatter = this._measurementOptions.formatDistance || L.bind(this.formatDistance, this);\n\n                for (var i = 1, len = latLngs.length; (isPolygon && i <= len) || i < len; i++) {\n                    ll1 = latLngs[i - 1];\n                    ll2 = latLngs[i % len];\n                    dist = ll1.distanceTo(ll2);\n                    totalDist += dist;\n\n                    p1 = this._map.latLngToLayerPoint(ll1);\n                    p2 = this._map.latLngToLayerPoint(ll2);\n\n                    pixelDist = p1.distanceTo(p2);\n\n                    if (pixelDist >= options.minPixelDistance) {\n                        L.marker.measurement(\n                            this._map.layerPointToLatLng([(p1.x + p2.x) / 2, (p1.y + p2.y) / 2]),\n                            formatter(dist), options.lang.segmentLength, this._getRotation(ll1, ll2), options)\n                            .addTo(this._measurementLayer);\n                    }\n                }\n\n                // Show total length for polylines\n                if (!isPolygon && this._measurementOptions.showTotalDistance) {\n                    L.marker.measurement(ll2, formatter(totalDist), options.lang.totalLength, 0, options)\n                        .addTo(this._measurementLayer);\n                }\n            }\n\n            if (isPolygon && options.showArea && latLngs.length > 2) {\n                formatter = options.formatArea || L.bind(this.formatArea, this);\n                var area = ringArea(latLngs);\n                L.marker.measurement(this.getBounds().getCenter(),\n                    formatter(area), options.lang.totalArea, 0, options)\n                    .addTo(this._measurementLayer);\n            }\n\n            return this;\n        },\n\n        _getRotation: function(ll1, ll2) {\n            var p1 = this._map.project(ll1),\n                p2 = this._map.project(ll2);\n\n            return Math.atan((p2.y - p1.y) / (p2.x - p1.x));\n        }\n    });\n\n    L.Polyline.addInitHook(function() {\n        addInitHook.call(this);\n    });\n\n    L.Circle.include({\n        showMeasurements: function(options) {\n            if (!this._map || this._measurementLayer) return this;\n\n            this._measurementOptions = L.extend({\n                showOnHover: false,\n                showArea: true,\n                lang: {\n                    totalArea: 'Total area',\n                }\n            }, options || {});\n\n            this._measurementLayer = L.layerGroup().addTo(this._map);\n            this.updateMeasurements();\n\n            this._map.on('zoomend', this.updateMeasurements, this);\n\n            return this;\n        },\n\n        hideMeasurements: function() {\n            if (!this._map) return this;\n\n            this._map.on('zoomend', this.updateMeasurements, this);\n\n            if (!this._measurementLayer) return this;\n            this._map.removeLayer(this._measurementLayer);\n            this._measurementLayer = null;\n\n            return this;\n        },\n\n        onAdd: override(L.Circle.prototype.onAdd, function(originalReturnValue) {\n            var showOnHover = this.options.measurementOptions && this.options.measurementOptions.showOnHover;\n            if (this.options.showMeasurements && !showOnHover) {\n                this.showMeasurements(this.options.measurementOptions);\n            }\n\n            return originalReturnValue;\n        }),\n\n        onRemove: override(L.Circle.prototype.onRemove, function(originalReturnValue) {\n            this.hideMeasurements();\n\n            return originalReturnValue;\n        }, true),\n\n        setLatLng: override(L.Circle.prototype.setLatLng, function(originalReturnValue) {\n            this.updateMeasurements();\n\n            return originalReturnValue;\n        }),\n\n        setRadius: override(L.Circle.prototype.setRadius, function(originalReturnValue) {\n            this.updateMeasurements();\n\n            return originalReturnValue;\n        }),\n\n        formatArea: formatArea,\n\n        updateMeasurements: function() {\n            if (!this._measurementLayer) return;\n\n            var latLng = this.getLatLng(),\n                options = this._measurementOptions,\n                formatter = options.formatArea || L.bind(this.formatArea, this);\n\n            this._measurementLayer.clearLayers();\n\n            if (options.showArea) {\n                formatter = options.formatArea || L.bind(this.formatArea, this);\n                var area = circleArea(this.getRadius());\n                L.marker.measurement(latLng,\n                    formatter(area), options.lang.totalArea, 0, options)\n                    .addTo(this._measurementLayer);\n            }\n        }\n    })\n\n    L.Circle.addInitHook(function() {\n        addInitHook.call(this);\n    });\n})();\n"],"names":["L","Marker","Measurement","Layer","extend","options","pane","initialize","latlng","measurement","title","rotation","setOptions","this","_latlng","_measurement","_title","_rotation","addTo","map","addLayer","onAdd","_map","getPane","getPanes","markerPane","el","_element","DomUtil","create","inner","innerHTML","on","_animateZoom","_setPosition","onRemove","off","removeChild","setPosition","latLngToLayerPoint","style","transform","opt","pos","_latLngToNewLayerPoint","zoom","center","round","marker","latLng","formatArea","a","unit","_measurementOptions","imperial","toFixed","Math","RADIUS","addInitHook","showOnHover","measurementOptions","showMeasurements","hideMeasurements","override","method","fn","hookAfter","apply","arguments","originalReturnValue","args","Array","prototype","slice","call","push","Polyline","include","_measurementLayer","minPixelDistance","showDistances","showArea","showTotalDistance","lang","totalLength","totalArea","segmentLength","layerGroup","updateMeasurements","removeLayer","setLatLngs","spliceLatLngs","formatDistance","d","feet","formatter","ll1","ll2","p1","p2","dist","latLngs","getLatLngs","isPolygon","Polygon","totalDist","length","Util","isArray","clearLayers","bind","i","len","distanceTo","layerPointToLatLng","x","y","_getRotation","area","coords","lowerIndex","middleIndex","upperIndex","rad","_","PI","coordsLength","lng","sin","lat","abs","ringArea","getBounds","getCenter","project","atan","Circle","setLatLng","setRadius","rho","getLatLng","getRadius","cos"],"sourceRoot":""}