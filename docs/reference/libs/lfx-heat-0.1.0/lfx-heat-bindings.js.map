{"version":3,"file":"lfx-heat-bindings.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kBAAkB;AAClB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,KAAK;AACL,IAAI,sCAAsC;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC;AACjC;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["webpack://leaflet.extras/./inst/htmlwidgets/bindings/lfx-heat-bindings.js"],"sourcesContent":["/* global LeafletWidget, $, L, topojson, csv2geojson, toGeoJSON */\r\nLeafletWidget.methods.addHeatmap = function(points, layerId, group, options) {\r\n\r\n  if(!$.isEmptyObject(points)) {\r\n    var heatmapLayer = L.heatLayer(points, options);\r\n    this.layerManager.addLayer(heatmapLayer, 'heatmap', layerId, group);\r\n  }\r\n};\r\n\r\nfunction getHeatmapIntensity(feature, intensityProperty) {\r\n  var intensity = null;\r\n  if(feature) {\r\n    if(typeof intensityProperty === 'string') {\r\n      intensity = feature.properties[intensityProperty];\r\n    } else if(typeof intensityProperty === 'function') {\r\n      intensity = intensityProperty(feature);\r\n    }\r\n  }\r\n  return intensity;\r\n}\r\n\r\nfunction getHeatmapCoords(geojson, intensityProperty) {\r\n\r\n  var latlngs = [];\r\n  if(typeof geojson === 'undefined' || geojson === null) {\r\n    return latlngs;\r\n  }\r\n\r\n  if(typeof geojson === 'string') {\r\n    geojson = JSON.parse(geojson);\r\n  }\r\n\r\n  // if input is a TopoJSON\r\n  // iterate over each of its objects and add their coords\r\n  if (geojson.type === 'Topology') {\r\n    var topoJsonFeatures = [];\r\n    for (var key in geojson.objects) {\r\n      var topoToGeo = topojson.feature(geojson, geojson.objects[key]);\r\n      if(L.Util.isArray(topoToGeo)) {\r\n        topoJsonFeatures = topoJsonFeatures.concat(topoToGeo);\r\n      } else if('features' in topoToGeo ) {\r\n        topoJsonFeatures = topoJsonFeatures.concat(topoToGeo.features);\r\n      } else {\r\n        topoJsonFeatures.push(topoToGeo);\r\n      }\r\n    }\r\n    return getHeatmapCoords(topoJsonFeatures, intensityProperty);\r\n  }\r\n\r\n  var features = L.Util.isArray(geojson) ?  geojson : geojson.features;\r\n\r\n  if(features) {  // either a FeatureCollection or an Array of Features\r\n    $.each(features, function(index, feature) {\r\n\r\n      var lat = null, lng = null;\r\n\r\n      // We're only interested in Points and Multipoints\r\n      // every other geometry is a shape\r\n      if(feature.geometry.type === 'Point') {\r\n        lat = parseFloat(feature.geometry.coordinates[1]);\r\n        lng = parseFloat(feature.geometry.coordinates[0]);\r\n\r\n        if(lat && lng) {\r\n          if(intensityProperty) {\r\n            latlngs.push([lat, lng,\r\n              getHeatmapIntensity(feature, intensityProperty)]);\r\n          } else {\r\n            latlngs.push([lat, lng]);\r\n          }\r\n        }\r\n      } else if(feature.geometry.type === 'MultiPoint') {\r\n        latlngs = latlngs.concat(\r\n          getHeatmapCoords(feature, intensityProperty));\r\n      }\r\n    });\r\n  } else if(geojson.type === 'Feature') { // Single GeoJSON Feature with MultiPoint dataset\r\n    $.each(geojson.geometry.coordinates, function(index, coordinate){\r\n      var lat = null, lng = null;\r\n      lat = parseFloat(coordinate[1]);\r\n      lng = parseFloat(coordinate[0]);\r\n      if(lat && lng) {\r\n        if(intensityProperty) {\r\n          latlngs.push([lat, lng,\r\n            getHeatmapIntensity(geojson, intensityProperty)]);\r\n        } else {\r\n          latlngs.push([lat, lng]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return latlngs;\r\n}\r\n\r\nfunction addGenericGeoJSONHeatmap( widget, geojson, intensityProperty, layerId, group, options) {\r\n  var heatmapCoords = getHeatmapCoords(geojson, intensityProperty);\r\n\r\n  if(!$.isEmptyObject(heatmapCoords)) {\r\n    var heatmapLayer = L.heatLayer(heatmapCoords, options);\r\n    widget.layerManager.addLayer(\r\n      heatmapLayer, 'heatmap', layerId, group);\r\n  }\r\n}\r\n\r\nLeafletWidget.methods.addGeoJSONHeatmap = function(geojson, intensityProperty, layerId, group, options) {\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(geojson)) {\r\n    $.getJSON(geojson, function(geojsondata){\r\n      addGenericGeoJSONHeatmap(self,\r\n        geojsondata, intensityProperty, layerId, group, options);\r\n    });\r\n  } else {\r\n    addGenericGeoJSONHeatmap(self,\r\n      geojson, intensityProperty, layerId, group, options);\r\n  }\r\n};\r\n\r\nLeafletWidget.methods.addKMLHeatmap = function(kml, intensityProperty, layerId, group, options) {\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(kml)) {\r\n    $.getJSON(kml, function(data){\r\n      var geojsondata = toGeoJSON.kml(\r\n        LeafletWidget.utils.parseXML(data));\r\n      addGenericGeoJSONHeatmap(self,\r\n        geojsondata, intensityProperty, layerId, group, options);\r\n    });\r\n  } else {\r\n    var geojsondata = toGeoJSON.kml(\r\n      LeafletWidget.utils.parseXML(kml));\r\n    addGenericGeoJSONHeatmap(self,\r\n      geojsondata, intensityProperty, layerId, group, options);\r\n  }\r\n};\r\n\r\nLeafletWidget.methods.addCSVHeatmap = function(csv, intensityProperty, layerId, group, options, parserOptions) {\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(csv)) {\r\n    $.getJSON(csv, function(data){\r\n      csv2geojson.csv2geojson(\r\n        data, parserOptions || {},\r\n        function(err, geojsondata) {\r\n          addGenericGeoJSONHeatmap(self,\r\n            geojsondata, intensityProperty, layerId, group, options);\r\n        }\r\n      );\r\n    });\r\n  } else {\r\n    csv2geojson.csv2geojson(\r\n      csv, parserOptions || {},\r\n      function(err, geojsondata) {\r\n        addGenericGeoJSONHeatmap(self,\r\n          geojsondata, intensityProperty, layerId, group, options);\r\n      }\r\n    );\r\n  }\r\n};\r\n\r\nLeafletWidget.methods.addGPXHeatmap = function(gpx, intensityProperty, layerId, group, options) {\r\n  var self = this;\r\n  if(LeafletWidget.utils.isURL(gpx)) {\r\n    $.getJSON(gpx, function(data){\r\n      var geojsondata = toGeoJSON.gpx(\r\n        LeafletWidget.utils.parseXML(data));\r\n      addGenericGeoJSONHeatmap(self,\r\n        geojsondata, intensityProperty, layerId, group, options);\r\n    });\r\n  } else {\r\n    var geojsondata = toGeoJSON.gpx(\r\n      LeafletWidget.utils.parseXML(gpx));\r\n    addGenericGeoJSONHeatmap(self,\r\n      geojsondata, intensityProperty, layerId, group, options);\r\n  }\r\n};\r\n\r\nLeafletWidget.methods.removeHeatmap = function(layerId) {\r\n  this.layerManager.removeLayer('heatmap', layerId);\r\n};\r\n\r\nLeafletWidget.methods.clearHeatmap = function() {\r\n  this.layerManager.clearLayers('heatmap');\r\n};\r\n"],"names":[],"sourceRoot":""}