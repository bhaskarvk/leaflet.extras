{"version":3,"file":"lfx-draw-bindings.js","mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,4BAA4B;AAC7E,KAAK;AACL;AACA;AACA;AACA,gDAAgD,4BAA4B;AAC5E,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA,IAAI;AACJ;AACA;AACA;AACA","sources":["webpack://leaflet.extras/./inst/htmlwidgets/bindings/lfx-draw-bindings.js"],"sourcesContent":["/* global LeafletWidget, $, L, Shiny, HTMLWidgets */\r\n\r\nLeafletWidget.methods.addDrawToolbar = function(targetLayerId, targetGroup, options) {\r\n  (function(){\r\n\r\n    var map = this;\r\n\r\n    if(map.drawToolbar) {\r\n      map.drawToolbar.remove(map);\r\n      delete map.drawToobar;\r\n    }\r\n\r\n    // FeatureGroup that will hold our drawn shapes/markers\r\n    // This can be an existing GeoJSON layer whose features can be edited/deleted or new ones added.\r\n    // OR an existing FeatureGroup whose features can be edited/deleted or new ones added.\r\n    // OR a new FeatureGroup to hold drawn shapes.\r\n    var editableFeatureGroup;\r\n\r\n    if(targetLayerId) {\r\n      // If we're given an existing GeoJSON layer find it and use it\r\n      editableFeatureGroup = map.layerManager.getLayer('geojson', targetLayerId);\r\n      if(editableFeatureGroup) {\r\n        map._editableGeoJSONLayerId = targetLayerId;\r\n      } else {\r\n        // throw an error if we can't find the target GeoJSON layer\r\n        throw 'GeoJSON layer with ID '+targetLayerId+' not Found';\r\n      }\r\n    } else {\r\n      // If we're given an existing FeatureLayer use that.\r\n      // In this case we don't throw an error if the specified FeatureGroup is not found,\r\n      // we silently create a new one.\r\n      if(!targetGroup) {\r\n        targetGroup = 'editableFeatureGroup';\r\n      }\r\n      editableFeatureGroup = map.layerManager.getLayerGroup(targetGroup, true);\r\n      map._editableFeatureGroupName = targetGroup;\r\n    }\r\n\r\n    // Create appropriate Marker Icon.\r\n    if(options && options.draw && options.draw.marker) {\r\n      if(options.draw.marker.markerIcon &&\r\n        options.draw.marker.markerIconFunction) {\r\n        options.draw.marker.icon =\r\n          options.draw.marker.markerIconFunction(\r\n            options.draw.marker.markerIcon);\r\n      }\r\n    }\r\n\r\n    // create appropriate options\r\n    if(!$.isEmptyObject(options.edit)) {\r\n      var editOptions = {};\r\n      if(!options.edit.remove) {\r\n        editOptions.remove = false;\r\n      }\r\n      if(!options.edit.edit) {\r\n        editOptions.edit = false;\r\n      } else if(!$.isEmptyObject(options.edit.selectedPathOptions)) {\r\n        editOptions.edit = {};\r\n        editOptions.edit.selectedPathOptions =\r\n          options.edit.selectedPathOptions;\r\n      }\r\n\r\n      if(!$.isEmptyObject(options.edit.poly)) {\r\n        editOptions.poly = options.edit.poly;\r\n      }\r\n\r\n      editOptions.featureGroup = editableFeatureGroup;\r\n      options.edit = editOptions;\r\n    }\r\n\r\n    map.drawToolbar =  new L.Control.Draw(options);\r\n    map.drawToolbar.addTo(map);\r\n\r\n    // Event Listeners\r\n    map.on(L.Draw.Event.DRAWSTART, function(e) {\r\n      if (!HTMLWidgets.shinyMode) return;\r\n      Shiny.onInputChange(map.id+'_draw_start', {'feature_type': e.layerType});\r\n    });\r\n\r\n    map.on(L.Draw.Event.DRAWSTOP, function(e) {\r\n      if (!HTMLWidgets.shinyMode) return;\r\n      Shiny.onInputChange(map.id+'_draw_stop', {'feature_type': e.layerType});\r\n    });\r\n\r\n    map.on(L.Draw.Event.CREATED, function (e) {\r\n      if (options.draw.singleFeature){\r\n        if (editableFeatureGroup.getLayers().length > 0) {\r\n          editableFeatureGroup.clearLayers();\r\n        }\r\n      }\r\n\r\n      var layer = e.layer;\r\n      editableFeatureGroup.addLayer(layer);\r\n\r\n      // assign a unique key to the newly created feature\r\n      var featureId = L.stamp(layer);\r\n      layer.feature = {\r\n        'type' : 'Feature',\r\n        'properties' : {\r\n          '_leaflet_id' : featureId,\r\n          'feature_type' : e.layerType\r\n        }\r\n      };\r\n\r\n      // circles are just Points and toGeoJSON won't store radius by default\r\n      // so we store it inside the properties.\r\n      if(typeof layer.getRadius === 'function') {\r\n        layer.feature.properties.radius = layer.getRadius();\r\n      }\r\n\r\n      if (!HTMLWidgets.shinyMode) return;\r\n\r\n      Shiny.onInputChange(map.id+'_draw_new_feature',\r\n        layer.toGeoJSON());\r\n      Shiny.onInputChange(map.id+'_draw_all_features',\r\n        editableFeatureGroup.toGeoJSON());\r\n    });\r\n\r\n    map.on(L.Draw.Event.EDITSTART, function (e) {\r\n      if (!HTMLWidgets.shinyMode) return;\r\n      Shiny.onInputChange(map.id+'_draw_editstart', true);\r\n    });\r\n    map.on(L.Draw.Event.EDITSTOP, function (e) {\r\n      if (!HTMLWidgets.shinyMode) return;\r\n      Shiny.onInputChange(map.id+'_draw_editstop', true);\r\n    });\r\n\r\n    map.on(L.Draw.Event.EDITED, function (e) {\r\n      var layers = e.layers;\r\n      layers.eachLayer(function(layer){\r\n        var featureId = L.stamp(layer);\r\n        if(!layer.feature) {\r\n          layer.feature = {'type' : 'Feature'};\r\n        }\r\n        if(!layer.feature.properties) {\r\n          layer.feature.properties = {};\r\n        }\r\n        layer.feature.properties._leaflet_id = featureId;\r\n        layer.feature.properties.layerId = layer.options.layerId;\r\n        if(typeof layer.getRadius === 'function') {\r\n          layer.feature.properties.radius = layer.getRadius();\r\n        }\r\n      });\r\n\r\n      if (!HTMLWidgets.shinyMode) return;\r\n\r\n      Shiny.onInputChange(map.id+'_draw_edited_features',\r\n        layers.toGeoJSON());\r\n      Shiny.onInputChange(map.id+'_draw_all_features',\r\n        editableFeatureGroup.toGeoJSON());\r\n    });\r\n\r\n    map.on(L.Draw.Event.DELETESTART, function (e) {\r\n      if (!HTMLWidgets.shinyMode) return;\r\n      Shiny.onInputChange(map.id+'_draw_deletestart', true);\r\n    });\r\n\r\n    map.on(L.Draw.Event.DELETESTOP, function (e) {\r\n      if (!HTMLWidgets.shinyMode) return;\r\n      Shiny.onInputChange(map.id+'_draw_deletestop', true);\r\n    });\r\n\r\n    map.on(L.Draw.Event.DELETED, function (e) {\r\n      var layers = e.layers;\r\n      layers.eachLayer(function(layer){\r\n        var featureId = L.stamp(layer);\r\n        if(!layer.feature) {\r\n          layer.feature = {'type' : 'Feature'};\r\n        }\r\n        if(!layer.feature.properties) {\r\n          layer.feature.properties = {};\r\n        }\r\n        layer.feature.properties._leaflet_id = featureId;\r\n        layer.feature.properties.layerId = layer.options.layerId;\r\n        if(typeof layer.getRadius === 'function') {\r\n          layer.feature.properties.radius = layer.getRadius();\r\n        }\r\n      });\r\n\r\n      if (!HTMLWidgets.shinyMode) return;\r\n      Shiny.onInputChange(map.id+'_draw_deleted_features',\r\n        layers.toGeoJSON());\r\n      Shiny.onInputChange(map.id+'_draw_all_features',\r\n        editableFeatureGroup.toGeoJSON());\r\n    });\r\n\r\n  }).call(this);\r\n\r\n};\r\n\r\nLeafletWidget.methods.removeDrawToolbar = function(clearFeatures) {\r\n  (function(){\r\n\r\n    var map = this;\r\n\r\n    if(map.drawToolbar) {\r\n      map.drawToolbar.remove(map);\r\n      delete map.drawToolbar;\r\n    }\r\n    if(map._editableFeatureGroupName && clearFeatures) {\r\n      var featureGroup = map.layerManager.getLayerGroup(map._editableFeatureGroupName, false);\r\n      featureGroup.clearLayers();\r\n    }\r\n    map._editableFeatureGroupName = null;\r\n    if(map._editableGeoJSONLayerId && clearFeatures) {\r\n      map.layerManager.removeLayer('geojson', map._editableGeoJSONLayerId);\r\n    }\r\n    map._editableGeoJSONLayerId = null;\r\n  }).call(this);\r\n\r\n};\r\n\r\nLeafletWidget.methods.getDrawnItems = function() {\r\n  var map = this;\r\n\r\n  var featureGroup;\r\n  if(map._editableGeoJSONLayerId) {\r\n    featureGroup = map.layerManager.getLayer('geojson', map._editableGeoJSONLayerId);\r\n  } else if(map._editableFeatureGroupName) {\r\n    featureGroup = map.layerManager.getLayerGroup(map._editableFeatureGroupName, false);\r\n  }\r\n  if(featureGroup) {\r\n    return featureGroup.toGeoJSON();\r\n  } else {\r\n    return null;\r\n  }\r\n\r\n};\r\n"],"names":[],"sourceRoot":""}